1 -  npm install -g @angular/cli устанавливаем ангулар кли глобально
2 - ng new my-first-project генерируем наш проект

Компоненты - ручной режим
1 - создаем каталог для компонента (например post)
2 - создаем файл компонента post.component.ts (главный файл)
  - импортируем Component декоратор из @angular/core
  - всё является классами поэтому экспортируем класс PostComponent
  - объявляем декоратор @Component для нашего класса и передаем туда объект опций:
    - selector: 'app-post'
    - templateUrl: './post.component.html'
  - нам ts подсказывает что наш компонент не объявлен в app.module. Объявляем его в declarations
  - теперь мы можем вывести наш компонент в шаблоне app.component.html тегом <app-post></app-post>
3 - создаем файл шаблона компонента post.component.html
4 - (не обязательно) создаем файл стилей компонента post.component.scss
  - подключаем стили в post.component.ts в декораторе @Component передавая в параметры:
    - styleUrls: ['./post.component.scss'],

Компоненты - cli
1 - ng g(generate) c(component) post --skipTests
  - ангулар автоматически создает и импортирует компонент и сбрасывает тесты

Свои настройки компонента
- вместо templateUrl в декоратор @Component можно передать свойство template
  куда передать разметку ввиде строки `<div>Component</div>`
- также можно передавать стили в свойство style и передать туда массив строк
  [`.post4 {padding: 5rem;}`]

-----------------------------

Динамические данные
1 - динамика заводится внутри классов, создаем переменную в классе:
  - title = 'Post component';
2 - выводим переменные в шаблоне с помощью интерполяции {{}} - для примитивов
  - <h1>{{title}}</h1>
3 - можно выполнять простые взаимодействия которые можно привести к строке
  - {{2+1}} // 3, {{'string' + ' js'}} // string js, {{[1,2,3]}} // 1,2,3

-----------------------------

Binding - привязка данных
1 - для односторонней связки html с ts оборачиваем свойство в [] скобки. Например <img [src]='img'/>
  и передаем туда переменную
2 - для event binding односторонней связки ts с html оборачиваем события в () скобки, указываем метод и передаем event
  <input type="text" (keyup.enter)="onInput($event)">
  onInput(e: KeyboardEvent) {this.val = (<HTMLInputElement>e.target).value}
3 - создаем локальную ссылку для элемента и далее получаем к нему доступ и можем передать эвент таким образом
  <input (blur)="onBlur(myInput.value)" #myInput>
  onBlur(str: string) {this.val = str}
4 - way binding двухстороннее связывание ts с html
  - создаем переменную с каким то начальным значением например value и байндим в элемент
    <input type="text" [value]="value">
  - добавляем байндинг события
    <input type="text" [value]="value" (input)="onInput($event)">
5 - связывание с помощью ngModel
  - импортируем в модуль (app.module.ts например) FormsModule
  - <input type="text" [(ngModel)]="value"> теперь value меняется при динамическом вводе текста
6 - если функция состоит из одной строки то можно ее объявить прямо в эвенте
  - <button (click)="imgStyles = {width: '300px', height: '300px'}">big</button>

------------------------------

Директивы - вспомогательные атрибуты для управления хтмл элепентов и компонентов
1 - ngStyle
  - при добавлении к элементу мы байндим ngStyle
    <div [ngStyle]="{width: '200px', borderRadius: '5px'}"></div>
2 - ngClass
  - <div [ngClass]="{active: title === 'active', hidden: !title}"></div>
  - <div [class.active]="title === 'active'" [class.hidden]="!title"></div>
3 - ngIf else - структурные
  - <div *ngIf="title === 'active'"></div> - одно условие
  - <div *ngIf="title === 'active'; else emptyText"></div> - условие с иначе
    <ng-template><div #emptyText>Пусто</div></ng-template> - контейнер для иначе
4 - ngSwitch
  - <div [ngSwitch]="title">
      <p *ngSwitchCase="'active'">case 1</p>
      <p *ngSwitchCase="'not active'">case 2</p>
      <p *ngSwitchDefault>case 3</p>
    </div>
5 - ngFor
  - <p *ngFor="let item of arrItems">{{item}}</p>
  - <p *ngFor="let item of arrItems; let idx = index">{{idx}}-{{item}}</p> - итерация с индексом

15
